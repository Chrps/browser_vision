{"version":3,"file":"js/633.26c46016.js","mappings":"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","sources":["webpack://browser-vision/./src/components/ImageUpload2.vue?845b","webpack://browser-vision/./src/components/ImageUpload2.vue","webpack://browser-vision/./src/components/ImageUpload2.vue?aab0","webpack://browser-vision/./src/components/opencvBridge.ts","webpack://browser-vision/./src/components/opencvChannels.ts","webpack://browser-vision/./src/components/opencvColorCvt.ts","webpack://browser-vision/./src/views/ImageConvertPage.vue?0a3a","webpack://browser-vision/./src/views/ImageConvertPage.vue","webpack://browser-vision/./src/views/ImageConvertPage.vue?9c3d"],"sourcesContent":["import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-4667bf1a\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"label\", {\n  for: \"imageInput\",\n  class: \"file-input-label\",\n  style: {\"display\":\"none\"}\n}, null, -1))\nconst _hoisted_2 = { class: \"image-container\" }\n\nimport cv from \"opencv-ts\";\n\n\n\nexport default /*#__PURE__*/_defineComponent({\n  name: 'ImageUpload2',\n  emits: [\"image-uploaded\"],\n  setup(__props, { emit: emits }) {\n\n\n\nconst supportedFormats = [\n  \"image/bmp\",\n  \"image/jpeg\",\n  \"image/png\",\n  \"image/webp\",\n  \"image/x-portable-bitmap\",\n  \"image/x-portable-graymap\",\n  \"image/x-portable-pixmap\",\n  \"image/x-portable-anymap\",\n  \"image/x-portable-raster\",\n  \"image/tiff\",\n  \"image/tiff-fx\",\n  \"image/vnd.radiance\",\n  \"image/vnd.radiance.rgb\",\n];\n\nconst uploadImage = (e: Event): void => {\n  const inputElement = e.target as HTMLInputElement;\n  if (!inputElement.files) {\n    return;\n  }\n  const src: string = URL.createObjectURL(inputElement.files[0]);\n  const img: HTMLImageElement | null = document.getElementById(\n    \"srcImage\"\n  ) as HTMLImageElement;\n  if (img === null) return;\n  img.setAttribute(\"src\", src);\n};\n\nconst handleImgSrcChange = (e: Event): void => {\n  emits(\"image-uploaded\", e.target as HTMLImageElement);\n};\n\nconst openFileDialog = (): void => {\n  const inputElement = document.getElementById(\n    \"imageInput\"\n  ) as HTMLInputElement;\n  inputElement.click();\n};\n\nconst dragEnter = (e: DragEvent): void => {\n  e.preventDefault();\n  // Add any visual feedback for drag enter, e.g., highlighting the drop zone.\n};\n\nconst dragOver = (e: DragEvent): void => {\n  e.preventDefault();\n  // Add any visual feedback for drag over, e.g., changing the cursor style.\n};\n\nconst dragLeave = (e: DragEvent): void => {\n  // Remove any visual feedback on drag leave.\n};\n\nconst handleDrop = (e: DragEvent): void => {\n  e.preventDefault();\n  const items = e.dataTransfer?.items;\n  // check if dropped items are files and they are images of supported formats\n  if (!items) return;\n  for (const item of items) {\n    if (item.kind === \"file\" && supportedFormats.includes(item.type)) {\n      const file = item.getAsFile();\n      if (!file) {\n        console.error(\"File is not supported\");\n        return;\n      }\n      const src: string = URL.createObjectURL(file);\n      const img = document.getElementById(\"srcImage\") as HTMLImageElement;\n      img?.setAttribute(\"src\", src);\n      break;\n    }\n    console.error(\"File is not supported\");\n  }\n};\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _hoisted_1,\n    _createElementVNode(\"input\", {\n      type: \"file\",\n      accept: \"image/*\",\n      id: \"imageInput\",\n      onChange: uploadImage,\n      style: {\"position\":\"absolute\",\"width\":\"0\",\"height\":\"0\",\"opacity\":\"0\",\"cursor\":\"pointer\",\"top\":\"0\",\"left\":\"0\"}\n    }, null, 32),\n    _createElementVNode(\"div\", {\n      class: \"drop-zone\",\n      onDragenter: dragEnter,\n      onDragover: dragOver,\n      onDragleave: dragLeave,\n      onDrop: handleDrop,\n      onClick: openFileDialog\n    }, \" Drag and drop an image here or click to upload. \", 32),\n    _createElementVNode(\"div\", _hoisted_2, [\n      _createElementVNode(\"img\", {\n        onLoad: handleImgSrcChange,\n        id: \"srcImage\",\n        style: {\"display\":\"none\"}\n      }, null, 32)\n    ])\n  ]))\n}\n}\n\n})","<template>\n  <div>\n    <label\n      for=\"imageInput\"\n      class=\"file-input-label\"\n      style=\"display: none\"\n    ></label>\n    <input\n      type=\"file\"\n      accept=\"image/*\"\n      id=\"imageInput\"\n      @change=\"uploadImage\"\n      style=\"\n        position: absolute;\n        width: 0;\n        height: 0;\n        opacity: 0;\n        cursor: pointer;\n        top: 0;\n        left: 0;\n      \"\n    />\n    <div\n      class=\"drop-zone\"\n      @dragenter=\"dragEnter\"\n      @dragover=\"dragOver\"\n      @dragleave=\"dragLeave\"\n      @drop=\"handleDrop\"\n      @click=\"openFileDialog\"\n    >\n      Drag and drop an image here or click to upload.\n    </div>\n    <div class=\"image-container\">\n      <img @load=\"handleImgSrcChange\" id=\"srcImage\" style=\"display: none\" />\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport cv from \"opencv-ts\";\nimport { defineEmits } from \"vue\";\n\nconst emits = defineEmits([\"image-uploaded\"]);\n\nconst supportedFormats = [\n  \"image/bmp\",\n  \"image/jpeg\",\n  \"image/png\",\n  \"image/webp\",\n  \"image/x-portable-bitmap\",\n  \"image/x-portable-graymap\",\n  \"image/x-portable-pixmap\",\n  \"image/x-portable-anymap\",\n  \"image/x-portable-raster\",\n  \"image/tiff\",\n  \"image/tiff-fx\",\n  \"image/vnd.radiance\",\n  \"image/vnd.radiance.rgb\",\n];\n\nconst uploadImage = (e: Event): void => {\n  const inputElement = e.target as HTMLInputElement;\n  if (!inputElement.files) {\n    return;\n  }\n  const src: string = URL.createObjectURL(inputElement.files[0]);\n  const img: HTMLImageElement | null = document.getElementById(\n    \"srcImage\"\n  ) as HTMLImageElement;\n  if (img === null) return;\n  img.setAttribute(\"src\", src);\n};\n\nconst handleImgSrcChange = (e: Event): void => {\n  emits(\"image-uploaded\", e.target as HTMLImageElement);\n};\n\nconst openFileDialog = (): void => {\n  const inputElement = document.getElementById(\n    \"imageInput\"\n  ) as HTMLInputElement;\n  inputElement.click();\n};\n\nconst dragEnter = (e: DragEvent): void => {\n  e.preventDefault();\n  // Add any visual feedback for drag enter, e.g., highlighting the drop zone.\n};\n\nconst dragOver = (e: DragEvent): void => {\n  e.preventDefault();\n  // Add any visual feedback for drag over, e.g., changing the cursor style.\n};\n\nconst dragLeave = (e: DragEvent): void => {\n  // Remove any visual feedback on drag leave.\n};\n\nconst handleDrop = (e: DragEvent): void => {\n  e.preventDefault();\n  const items = e.dataTransfer?.items;\n  // check if dropped items are files and they are images of supported formats\n  if (!items) return;\n  for (const item of items) {\n    if (item.kind === \"file\" && supportedFormats.includes(item.type)) {\n      const file = item.getAsFile();\n      if (!file) {\n        console.error(\"File is not supported\");\n        return;\n      }\n      const src: string = URL.createObjectURL(file);\n      const img = document.getElementById(\"srcImage\") as HTMLImageElement;\n      img?.setAttribute(\"src\", src);\n      break;\n    }\n    console.error(\"File is not supported\");\n  }\n};\n</script>\n\n<style scoped>\n.drop-zone {\n  border: 2px dashed #4caf50; /* Green border color */\n  background: #e8f5e9; /* Light green background color */\n  padding: 20px;\n  text-align: center;\n  cursor: pointer;\n  transition: background-color 0.3s ease; /* Add a transition for a smoother hover effect */\n  color: #023020; /* Dark green text color */\n}\n\n.drop-zone:hover {\n  background: #c8e6c9; /* Darker green background color on hover */\n}\n\n#imageInput {\n  display: none;\n}\n\n:root {\n  --primary-color: #4caf50; /* Green */\n  --background-color: #e8f5e9; /* Light green background */\n  --text-color: #333; /* Dark gray text color */\n  --accent-color: #2196f3; /* Accent color for buttons, links, etc. */\n}\n\n.image-container {\n  margin-top: 20px;\n}\n</style>\n","import script from \"./ImageUpload2.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./ImageUpload2.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./ImageUpload2.vue?vue&type=style&index=0&id=4667bf1a&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-4667bf1a\"]])\n\nexport default __exports__","import cv, { Mat } from \"opencv-ts\";\n\nexport const convertImageToMat = (\n  image: HTMLImageElement | null\n): Mat | null => {\n  if (image === null) {\n    console.error(\"Failed to convert HTMLImageElement to Mat.\");\n    return null;\n  }\n  const mat = cv.imread(image);\n  if (mat.empty()) {\n    console.error(\"Failed to convert HTMLImageElement to Mat.\");\n    return null;\n  }\n  return mat;\n};\n\nexport const convertMatToImage = (mat: Mat | null): HTMLImageElement | null => {\n  if (mat === null) {\n    console.error(\"Failed to convert Mat to HTMLImageElement.\");\n    return null;\n  }\n  if (mat.empty()) {\n    console.error(\"Failed to convert Mat to HTMLImageElement.\");\n    return null;\n  }\n\n  const canvas = document.createElement(\"canvas\");\n  const ctx = canvas.getContext(\"2d\");\n\n  if (ctx === null) {\n    console.error(\"Failed to get 2D context.\");\n    return null;\n  }\n\n  // creative way to convert Mat to Image\n  canvas.width = mat.cols;\n  canvas.height = mat.rows;\n  cv.imshow(canvas, mat);\n  const image = new Image();\n  image.src = canvas.toDataURL(\"image/png\");\n\n  return image;\n};\n","import cv, { Mat } from \"opencv-ts\";\n\nexport const getNumberOfChannels = (mat: Mat | null): number => {\n  if (mat === null) {\n    console.error(\"Failed to get number of channels.\");\n    return -1;\n  }\n  if (mat.empty()) {\n    console.error(\"Failed to get number of channels.\");\n    return -1;\n  }\n  return mat.channels();\n};\n\nexport const splitChannels = (mat: Mat | null): Mat[] | null => {\n  if (mat === null) {\n    console.error(\"Failed to split channels.\");\n    return null;\n  }\n  if (mat.empty()) {\n    console.error(\"Failed to split channels.\");\n    return null;\n  }\n  const channels = new cv.MatVector();\n  cv.split(mat, channels);\n  const channelsArray = [];\n  for (let i = 0; i < channels.size(); i++) {\n    channelsArray.push(channels.get(i));\n  }\n  return channelsArray;\n};\n","import cv, { Mat } from \"opencv-ts\";\n\n// temp function\nexport const convertToGray = (mat: Mat | null): Mat | null => {\n  if (mat === null) {\n    console.error(\"Failed to convert to gray.\");\n    return null;\n  }\n  if (mat.empty()) {\n    console.error(\"Failed to convert to gray.\");\n    return null;\n  }\n  const gray = new cv.Mat();\n  cv.cvtColor(mat, gray, cv.COLOR_RGBA2GRAY);\n  return gray;\n};\n","import { defineComponent as _defineComponent } from 'vue'\nimport { createElementVNode as _createElementVNode, createVNode as _createVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\"\n\nconst _withScopeId = n => (_pushScopeId(\"data-v-1269bee8\"),n=n(),_popScopeId(),n)\nconst _hoisted_1 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"h1\", null, \"Image Conversion\", -1))\nconst _hoisted_2 = {\n  key: 0,\n  class: \"image-container\"\n}\nconst _hoisted_3 = { class: \"row\" }\nconst _hoisted_4 = { class: \"image-box\" }\nconst _hoisted_5 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"label\" }, \"Input\", -1))\nconst _hoisted_6 = { class: \"image-wrapper\" }\nconst _hoisted_7 = [\"src\"]\nconst _hoisted_8 = { class: \"image-box\" }\nconst _hoisted_9 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"label\" }, \"Output\", -1))\nconst _hoisted_10 = { class: \"image-wrapper\" }\nconst _hoisted_11 = [\"src\"]\nconst _hoisted_12 = { class: \"row\" }\nconst _hoisted_13 = { class: \"image-box\" }\nconst _hoisted_14 = /*#__PURE__*/ _withScopeId(() => /*#__PURE__*/_createElementVNode(\"span\", { class: \"label\" }, \"Channels\", -1))\nconst _hoisted_15 = { class: \"image-wrapper\" }\nconst _hoisted_16 = [\"src\"]\n\nimport ImageUpload from \"@/components/ImageUpload2.vue\";\nimport {\n  convertImageToMat,\n  convertMatToImage,\n} from \"@/components/opencvBridge\";\nimport {\n  getNumberOfChannels,\n  splitChannels,\n} from \"@/components/opencvChannels\";\nimport { convertToGray } from \"@/components/opencvColorCvt\";\nimport { ref } from \"vue\";\n\n\nexport default /*#__PURE__*/_defineComponent({\n  name: 'ImageConvertPage',\n  setup(__props) {\n\nconst uploadedImage = ref<HTMLImageElement | null>(null);\nconst outputImage = ref<HTMLImageElement | null>(null);\n\n// Additional references for channel images\nconst channelImages = ref<(HTMLImageElement | null)[]>([]);\n\n// Handle the custom event when the image is uploaded\nconst handleImageUploaded = (imgElement: HTMLImageElement) => {\n  console.log(\"Image uploaded\");\n  uploadedImage.value = imgElement;\n  let mat = convertImageToMat(uploadedImage.value);\n  // Convert the image to grayscale\n  mat = convertToGray(mat);\n  const outputImageElement = convertMatToImage(mat);\n  console.log(outputImageElement);\n  console.log(mat);\n  outputImage.value = outputImageElement;\n\n  const channels = splitChannels(mat);\n\n  // Create images for each channel\n  if (channels) {\n    channelImages.value = channels.map((channelMat) =>\n      convertMatToImage(channelMat)\n    );\n  } else {\n    channelImages.value = []; // Set it to an empty array if 'channels' is null\n  }\n};\n\nreturn (_ctx: any,_cache: any) => {\n  return (_openBlock(), _createElementBlock(\"div\", null, [\n    _hoisted_1,\n    _createVNode(ImageUpload, { onImageUploaded: handleImageUploaded }),\n    (uploadedImage.value && outputImage.value)\n      ? (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [\n          _createElementVNode(\"div\", _hoisted_3, [\n            _createElementVNode(\"div\", _hoisted_4, [\n              _hoisted_5,\n              _createElementVNode(\"div\", _hoisted_6, [\n                _createElementVNode(\"img\", {\n                  src: uploadedImage.value.src,\n                  alt: \"Uploaded Image\",\n                  class: \"scaled-image\"\n                }, null, 8, _hoisted_7)\n              ])\n            ]),\n            _createElementVNode(\"div\", _hoisted_8, [\n              _hoisted_9,\n              _createElementVNode(\"div\", _hoisted_10, [\n                _createElementVNode(\"img\", {\n                  src: outputImage.value.src,\n                  alt: \"Output Image\",\n                  class: \"scaled-image\"\n                }, null, 8, _hoisted_11)\n              ])\n            ])\n          ]),\n          _createElementVNode(\"div\", _hoisted_12, [\n            _createElementVNode(\"div\", _hoisted_13, [\n              _hoisted_14,\n              _createElementVNode(\"div\", _hoisted_15, [\n                (_openBlock(true), _createElementBlock(_Fragment, null, _renderList(channelImages.value, (channelImage, index) => {\n                  return (_openBlock(), _createElementBlock(\"img\", {\n                    key: index,\n                    src: channelImage?.src,\n                    class: \"scaled-image\",\n                    alt: \"Channel Image\"\n                  }, null, 8, _hoisted_16))\n                }), 128))\n              ])\n            ])\n          ])\n        ]))\n      : _createCommentVNode(\"\", true)\n  ]))\n}\n}\n\n})","<!-- views/ImageConvertPage.vue -->\n<template>\n  <div>\n    <h1>Image Conversion</h1>\n    <ImageUpload @image-uploaded=\"handleImageUploaded\" />\n    <div class=\"image-container\" v-if=\"uploadedImage && outputImage\">\n      <!-- Row 1: Input and Output images side by side -->\n      <div class=\"row\">\n        <div class=\"image-box\">\n          <span class=\"label\">Input</span>\n          <div class=\"image-wrapper\">\n            <img\n              :src=\"uploadedImage.src\"\n              alt=\"Uploaded Image\"\n              class=\"scaled-image\"\n            />\n          </div>\n        </div>\n        <div class=\"image-box\">\n          <span class=\"label\">Output</span>\n          <div class=\"image-wrapper\">\n            <img\n              :src=\"outputImage.src\"\n              alt=\"Output Image\"\n              class=\"scaled-image\"\n            />\n          </div>\n        </div>\n      </div>\n\n      <!-- Row 2: Channels side by side -->\n      <div class=\"row\">\n        <div class=\"image-box\">\n          <span class=\"label\">Channels</span>\n          <div class=\"image-wrapper\">\n            <!-- Add image elements for each channel -->\n            <img\n              v-for=\"(channelImage, index) in channelImages\"\n              :key=\"index\"\n              :src=\"channelImage?.src\"\n              class=\"scaled-image\"\n              alt=\"Channel Image\"\n            />\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport ImageUpload from \"@/components/ImageUpload2.vue\";\nimport {\n  convertImageToMat,\n  convertMatToImage,\n} from \"@/components/opencvBridge\";\nimport {\n  getNumberOfChannels,\n  splitChannels,\n} from \"@/components/opencvChannels\";\nimport { convertToGray } from \"@/components/opencvColorCvt\";\nimport { ref } from \"vue\";\n\nconst uploadedImage = ref<HTMLImageElement | null>(null);\nconst outputImage = ref<HTMLImageElement | null>(null);\n\n// Additional references for channel images\nconst channelImages = ref<(HTMLImageElement | null)[]>([]);\n\n// Handle the custom event when the image is uploaded\nconst handleImageUploaded = (imgElement: HTMLImageElement) => {\n  console.log(\"Image uploaded\");\n  uploadedImage.value = imgElement;\n  let mat = convertImageToMat(uploadedImage.value);\n  // Convert the image to grayscale\n  mat = convertToGray(mat);\n  const outputImageElement = convertMatToImage(mat);\n  console.log(outputImageElement);\n  console.log(mat);\n  outputImage.value = outputImageElement;\n\n  const channels = splitChannels(mat);\n\n  // Create images for each channel\n  if (channels) {\n    channelImages.value = channels.map((channelMat) =>\n      convertMatToImage(channelMat)\n    );\n  } else {\n    channelImages.value = []; // Set it to an empty array if 'channels' is null\n  }\n};\n</script>\n\n<style scoped>\n.image-container {\n  display: flex;\n  flex-wrap: wrap; /* Allow rows to wrap to the next line if necessary */\n  justify-content: center; /* Center the content horizontally */\n  align-items: center; /* Center the content vertically */\n}\n\n.row {\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  flex-wrap: wrap; /* Allow images to wrap within the row if necessary */\n}\n\n.image-box,\n.channel-wrapper {\n  margin: 10px;\n  text-align: center;\n  display: inline-block; /* Make image boxes inline-block */\n  width: 45%; /* Specify a fixed width for each image box */\n}\n\n/* Add the following CSS for the channel images */\n.channel-box {\n  margin: 10px;\n  text-align: center;\n  display: inline-block;\n  width: 45%; /* Adjust the width to match the input/output images */\n}\n\n.label {\n  font-weight: bold;\n}\n\n.image-wrapper,\n.channel-wrapper {\n  max-width: 100%; /* Ensure the images don't exceed their container's width */\n  max-height: 100vh; /* Ensure the images don't exceed the viewport's height */\n  display: flex;\n  align-items: center;\n  justify-content: center;\n}\n\n.scaled-image,\n.channel-image {\n  width: 100%; /* Make sure all images have the same width */\n  height: 100%; /* Make sure all images have the same height */\n  object-fit: contain; /* Maintain aspect ratio and fit the images within the container */\n}\n</style>\n","import script from \"./ImageConvertPage.vue?vue&type=script&setup=true&lang=ts\"\nexport * from \"./ImageConvertPage.vue?vue&type=script&setup=true&lang=ts\"\n\nimport \"./ImageConvertPage.vue?vue&type=style&index=0&id=1269bee8&scoped=true&lang=css\"\n\nimport exportComponent from \"../../node_modules/vue-loader/dist/exportHelper.js\"\nconst __exports__ = /*#__PURE__*/exportComponent(script, [['__scopeId',\"data-v-1269bee8\"]])\n\nexport default __exports__"],"names":["_withScopeId","n","_pushScopeId","_popScopeId","_hoisted_1","_createElementVNode","for","class","style","_hoisted_2","_defineComponent","name","emits","setup","__props","emit","supportedFormats","uploadImage","e","inputElement","target","files","src","URL","createObjectURL","img","document","getElementById","setAttribute","handleImgSrcChange","openFileDialog","click","dragEnter","preventDefault","dragOver","dragLeave","handleDrop","items","dataTransfer","item","kind","includes","type","file","getAsFile","console","error","_ctx","_cache","_openBlock","_createElementBlock","accept","id","onChange","onDragenter","onDragover","onDragleave","onDrop","onClick","onLoad","__exports__","convertImageToMat","image","mat","cv","empty","convertMatToImage","canvas","createElement","ctx","getContext","width","cols","height","rows","Image","toDataURL","splitChannels","channels","channelsArray","i","size","push","get","convertToGray","gray","key","_hoisted_3","_hoisted_4","_hoisted_5","_hoisted_6","_hoisted_7","_hoisted_8","_hoisted_9","_hoisted_10","_hoisted_11","_hoisted_12","_hoisted_13","_hoisted_14","_hoisted_15","_hoisted_16","uploadedImage","ref","outputImage","channelImages","handleImageUploaded","imgElement","log","value","outputImageElement","map","channelMat","_createVNode","ImageUpload","onImageUploaded","alt","_Fragment","_renderList","channelImage","index","_createCommentVNode"],"sourceRoot":""}